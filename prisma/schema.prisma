generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  clerkId   String    @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follows[] @relation("following")
  following              Follows[] @relation("follower")
  notifications          Notification[] @relation("userNotifications")
  notificationsCreated   Notification[] @relation("notificationCreator")

  sentMessages           Message[] @relation("sentMessages")
  receivedMessages       Message[] @relation("receivedMessages")
  groupMemberships       GroupMember[]
  groupsCreated          GroupChat[]
}

model Post {
  id        String    @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments     Comment[]
  likes        Like[]
  notifications Notification[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  // Relations
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?
  messageId  String?                
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW 
  MESSAGE   
}

//
// Messaging System
//
model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String?
  groupId     String?
  text        String?
  image       String?
  status      MessageStatus @default(SENT)
  readAt      DateTime?
  createdAt   DateTime @default(now())

  // Relations
  sender      User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User?    @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  group       GroupChat? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@index([senderId, receiverId])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

//
// Group Chat System
//
model GroupChat {
  id          String   @id @default(cuid())
  name        String
  description String?
  creatorId   String
  createdAt   DateTime @default(now())

  // Relations
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members      GroupMember[]
  messages     Message[]
}

model GroupMember {
  userId     String
  groupId    String
  joinedAt   DateTime @default(now())

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group      GroupChat  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}